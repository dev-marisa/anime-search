{"version":3,"sources":["getRandomAnime.js","Components/Search.jsx","Components/Anime.jsx","Components/History.jsx","App.js","dedupe.js","reportWebVitals.js","index.js"],"names":["getRandomAnime","titles","Math","floor","random","length","Search","props","useState","q","setQ","results","setResults","useEffect","axios","get","then","res","data","catch","err","console","error","onSubmit","e","preventDefault","onSearch","className","type","placeholder","onChange","target","value","slice","map","anime","onClick","select","title","mal_id","Anime","src","image_url","alt","style","width","score","synopsis","History","history","i","reset","App","result","setResult","setHistory","cachedHistory","localStorage","getItem","JSON","parse","removeItem","setItem","stringify","newSearch","arr","newArr","item","exists","push","dedupe","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dba8b006.chunk.js","sourcesContent":["export default function getRandomAnime() {\r\n    const titles = [\r\n        \"Boku no Hero Academia\", \r\n        \"Cowboy Bebop\", \r\n        \"Katanagatari\", \r\n        \"FLCL\", \r\n        \"Demon Slayer\", \r\n        \"Fate/Zero\", \r\n        \"Detective Conan\", \r\n        \"Mahou Shoujo Madoka★Magica\", \r\n        \"Monster\", \r\n        \"Ginga Eiyuu Densetsu\", \r\n        \"Lucky☆Star\", \r\n        \"Jojo's Bizarre Adventure\",\r\n        \"Heartcatch Precure!\"\r\n    ];\r\n    return titles[Math.floor(Math.random() * titles.length)];\r\n}","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport getRandomAnime from '../getRandomAnime';\r\n\r\nconst Search = props => {\r\n\r\n  const [q, setQ] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(q.length > 2) {\r\n      axios.get(`https://api.jikan.moe/v3/search/anime?q=${q}`)\r\n        .then(res => {\r\n          setResults(res.data.results);\r\n        }).catch(err => console.error(err));\r\n    } else {\r\n      setResults([]);\r\n    }\r\n  }, [q]);\r\n\r\n  const search = e => {\r\n    e.preventDefault();\r\n    if(results.length > 0) {\r\n      props.onSearch(results[0]);\r\n    }\r\n    setQ(\"\");\r\n    setResults([]);\r\n  }\r\n\r\n  const select = anime => {\r\n    props.onSearch(anime);\r\n    setQ(\"\");\r\n    setResults([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <form onSubmit={search}>\r\n      <div className=\"input-group mb-3\">\r\n        <div className=\"input-group-prepend\">\r\n          <span className=\"input-group-text\">Search for an anime like...</span>\r\n        </div>\r\n        <input type=\"search\" className=\"form-control\" placeholder={getRandomAnime()} onChange={e => setQ(e.target.value)} value={q} />\r\n        <div className=\"input-group-prepend\">\r\n          <input type=\"submit\" value=\"GO!\" className=\"btn btn-primary\" />\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <div className=\"card\">\r\n      <ul className=\"list-group list-group-flush\">\r\n        {results.slice(0, 5).map(anime =>\r\n          <li key={anime.mal_id} className=\"list-group-item\" onClick={e => select(anime)}>\r\n            {anime.title}\r\n            <button className=\"btn btn-sm btn-outline-secondary float-right\">View</button>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Anime = props => {\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-header bg-primary text-light\">{props.anime.title}</div>\r\n      <div className=\"card-body\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-3\">\r\n            <img src={props.anime.image_url} alt=\"img\" style={{width: \"100%\"}} />\r\n          </div>\r\n          <div className=\"col-sm-9\">\r\n            <h4>Score: {props.anime.score}</h4>\r\n            <p>{props.anime.synopsis}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Anime;","import React from 'react';\r\n\r\n\r\nconst History = props => {\r\n\r\n  return (\r\n    <ul className=\"list-group\">\r\n      {props.history.map((anime, i) => \r\n        <li className=\"list-group-item\" onClick={e => props.onSearch(anime)} key={i}>{anime.title}</li>  \r\n      )}\r\n      {props.history.length > 0 ?\r\n        <li className=\"list-group-item\" onClick={props.reset}>Clear History</li> : \"\"}\r\n    </ul>\r\n  )\r\n\r\n}\r\n\r\nexport default History;","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Search from './Components/Search'; \nimport Anime from './Components/Anime';\nimport History from './Components/History';\nimport Confirm from './Components/Confirm';\nimport dedupe from './dedupe';\nimport './App.css';\n\n\nconst App = props => {\n\n  const [result, setResult] = useState({});\n  const [history, setHistory] = useState([]);\n\n  useEffect(() => {\n    // on page load check for past saved results\n    const cachedHistory = localStorage.getItem(\"history\");\n    if(cachedHistory) {\n      try {\n        setHistory(JSON.parse(cachedHistory));\n      } catch(err) {\n        console.error(\"history corrupted... \\n\", err);\n        localStorage.removeItem(\"history\");\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    // when history is updated let's store it in localhost\n    localStorage.setItem('history', JSON.stringify(history));\n  }, [history]);\n\n  const newSearch = anime => {\n    setResult(anime);\n    setHistory(dedupe([anime, ...history]));\n  }\n\n  const reset = e => {\n    localStorage.removeItem(\"history\");\n    setResult({});\n    setHistory([]);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron bg-primary text-light\">\n        <h1>AniApi</h1>\n      </div>\n      <Search onSearch={newSearch} />\n      <div className=\"row\">\n        <div className=\"col-sm-8\">\n          <h4 className=\"my-3\">Showing results...</h4>\n          { result.title ? <Anime anime={result} /> : \"\" }\n        </div>\n        <div className=\"col-sm-4\">\n          <h4 className=\"my-3\">Past Searches</h4>\n          <History history={history} onSearch={newSearch} reset={reset} />\n        </div>\n      </div>\n      {/* <Confirm /> */}\n    </div>\n  );\n}\n\nexport default App;","export default function dedupe(arr) {\r\n    const newArr = [];\r\n    for(let item of arr) {\r\n        let exists = false;\r\n        for(let thing of newArr) {\r\n            // we can use the `mal_id` to compare the objects\r\n            if(thing.mal_id === item.mal_id) {\r\n                exists = true;\r\n                break\r\n            }\r\n        }\r\n        if(!exists) {\r\n            newArr.push(item);\r\n        }\r\n    }\r\n    return newArr;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}